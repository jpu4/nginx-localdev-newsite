server {
	listen 80;
	listen [::]:80;

	server_name SITENAME.TLD;
	root SITEROOT/SITENAME;
	index index.php index.html index.htm;

	access_log LOGROOT/SITENAME.access_log; 
	error_log LOGROOT/SITENAME.error_log; 

	client_max_body_size 128m;
	
	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;

		# WORDPRESS: include the "$is_args$args" so non-default permalinks doesn't break when using query string
        # try_files $uri $uri/ /index.php$is_args$args;
	}

	# pass PHP scripts to FastCGI server
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	
		# With php-fpm (or other unix sockets):
		fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
		# With php-cgi (or other tcp sockets):
		#fastcgi_pass 127.0.0.1:9000;

		#NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
		include fastcgi.conf;
		fastcgi_intercept_errors on;
		#fastcgi_pass php;
		fastcgi_buffers 16 16k;
		fastcgi_buffer_size 32k;
	}

	location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
		expires max;
		access_log off;
		log_not_found off;
	}

	# deny access to .htaccess files
	location ~ /\.ht {
		deny all;
	}

	# Global restrictions configuration file. https://codex.wordpress.org/Nginx
	# Designed to be included in any server {} block.
	location = /favicon.ico {
		log_not_found off;
		access_log off;
	}
	# robots.txt fallback to index.php
	location = /robots.txt {
	# Some WordPress plugin gererate robots.txt file
		allow all;
		try_files $uri $uri/ /index.php?$args @robots;
		access_log off;
		log_not_found off;
	}
	# additional fallback if robots.txt doesn't exist
	location @robots {
	return 200 "User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n";
	}

	# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac) excepted .well-known directory.
	# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
	location ~ /\.(?!well-known\/) {
		deny all;
	}

	# Deny access to any files with a .php extension in the uploads directory for the single site
	location /wp-content/uploads {
		location ~ \.php$ {
			deny all;
		}
	}


	# Deny access to any files with a .php extension in the uploads directory
	# Works in sub-directory installs and also in multisite network
	# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
	location ~* /(?:uploads|files)/.*\.php$ {
		deny all;
	}

}